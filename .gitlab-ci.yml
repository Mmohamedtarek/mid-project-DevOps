stages:
  - notify 
  - install
  - lint
  - test 
  - build
  - scan
  - deploy

notify:
  stage: notify
  script:
   - >
     curl -X POST -H 'Content-type: application/json' \
      --data "{
        \"text\": \"🛠️ *Pipeline time!* 🚨\nLet's build greatness, one commit at a time 💪\n*Remember*: with great \`git push\` comes great responsibility 😎\nStay focused and let the pipeline flow without any hiccups!😎\n🔧 Project: *$CI_PROJECT_NAME*\n🔁 Commit: \`$CI_COMMIT_SHORT_SHA\`\n👤 By: *$GITLAB_USER_NAME*\"
      }" \
      $SLACK_WEBHOOK
  tags:
    - aws

install_frontend:
  stage: install
  image: node:18-alpine3.21
  script: 
   - echo "Installing frontend dependencies....."
   - cd frontend
   - npm install
  artifacts:
    paths: 
      - frontend/node_modules/
  tags:
    - aws
install_backend: 
  stage: install
  image: python:3.10.17-alpine
  script:
   - echo "Installing backend dependencies......"
   - pip install --upgrade pip
   - pip install -r backend/requirements.txt
  tags:
    - aws
lint_frontend:
  stage: lint
  image: node:18-alpine3.21
  script:
   - echo "Linting frontend..."
   - cd frontend
   - npm run lint
  dependencies:
   - install_frontend
  tags:
    - aws
lint_backend:
  stage: lint
  image: python:3.10.17-alpine
  script:    
   - echo "Linting backend..."
   - pip install flake8
   - flake8 backend/
  dependencies:
   - install_backend
  tags:
    - aws
test_frontend:
  stage: test
  image: node:18-alpine3.21
  script:
   - echo "Running frontend tests..."
   - cd frontend
   - npm run test
  dependencies:
    - install_frontend
  tags:
    - aws
test_backend:
  stage: test
  image: python:3.10.17-alpine
  script:
   - echo "Running backend tests..."
   - pip install -r backend/requirements.txt
   - cd backend
   - export PYTHONPATH=$(pwd)
   - pytest tests/ 
  dependencies:
    - install_backend
  tags:
    - aws
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
    - docker buildx create --use
  script:
   - cd frontend
   - docker buildx build --platform linux/amd64,linux/arm64 -t frontend-app . 
   - cd ../backend
   - docker buildx build --platform linux/amd64,linux/arm64 -t backend-app .
  only:
   - main
  tags:
    - aws
scan:
  stage: scan
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  script:
    - echo "Running trivy scan on backend..."
    - trivy image backend-app --quiet > trivy-backend-report.txt
    - echo "Running trivy scan on frontend..."
    - trivy image frontend-app --quiet > trivy-frontend-report.txt
  dependencies:
    - build
  only:
    - main
  artifacts:
    paths:
      - trivy-backend-report.txt
      - trivy-frontend-report.txt
  tags:
    - aws
deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client rsync
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - rsync -az --quiet -e "ssh -o StrictHostKeyChecking=no" . $EC2_USER@$EC2_HOST:/home/ubuntu/app
    - ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST "cd /home/ubuntu/app && docker compose up -d --build"
  only:
    - main
  tags:
    - aws